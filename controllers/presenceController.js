
const { FichePresence, Dossier,InfoIdent}=require('../models/association.js');
const { getIo } = require('../utils/socket');
const { Op } = require("sequelize");

// üìå R√©cup√©rer toutes les fiches de pr√©sence
exports.getAllPresences = async (req, res) => {
  try {
    const presences = await FichePresence.findAll();
    const dossiers = await Dossier.findAll({
      include: [
        {
          model: InfoIdent,
          attributes: ["nom", "prenom"], // R√©cup√©rer nom et pr√©nom
        },
      ],
      attributes: ["matricule"], // On r√©cup√®re le matricule pour associer aux demandes
    });

    // 3. Combiner les informations des demandes de cong√© et des dossiers par matricule
    const result = presences.map(presence => {
      const dossier = dossiers.find(d => d.matricule === presence.matricule); // Trouver le dossier correspondant √† la demande de cong√©
      if (dossier && dossier.InfoIdent) {
        return {
          ...presence.dataValues, // Inclure toutes les donn√©es de la demande de cong√©
          nom: dossier.InfoIdent.nom, // Ajouter le nom de l'agent
          prenom: dossier.InfoIdent.prenom, // Ajouter les pr√©noms de l'agent
        };
      }
      return demande;
    });
    res.status(200).json(result);
  } catch (error) {
    res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des pr√©sences", error });
  }
};

// üìå R√©cup√©rer les pr√©sences pour une date sp√©cifique
exports.getPresencesByDate = async (req, res) => {
    const { date } = req.params;
  
    try {
      const presences = await FichePresence.findAll({
        where: {
          date_presence: { [Op.eq]: date },
        },
      });
  
      // V√©rifiez si la liste des pr√©sences est vide
      if (presences.length === 0) {
        return res.status(404).json({ message: "Aucune pr√©sence enregistr√©e pour cette date" });
      }
  
      res.status(200).json(presences);
    } catch (error) {
      res.status(500).json({ message: "Erreur r√©cup√©ration pr√©sences", error });
    }
  };
  

// üìå Ajouter une nouvelle pr√©sence ou mettre √† jour (upsert)


exports.savePresence = async (req, res) => {
    const { fiches } = req.body; // tableau des fiches de pr√©sence
  
    // V√©rifier si le tableau 'fiches' est pr√©sent et contient des donn√©es
    if (!fiches || !Array.isArray(fiches) || fiches.length === 0) {
      return res.status(400).json({ message: "Aucune fiche de pr√©sence √† enregistrer" });
    }

    try {
      // It√©rer sur chaque fiche de pr√©sence et effectuer l'op√©ration de cr√©ation ou de mise √† jour
      const result = await Promise.all(
        fiches.map(async (fiche) => {
          const { matricule, statut, heure_arrivee, heure_depart, observations, date_presence } = fiche;
          
          // Assurer que les champs obligatoires sont pr√©sents
          if (!matricule || !date_presence) {
            throw new Error("Le matricule et la date sont requis pour chaque fiche de pr√©sence.");
          }

          // Chercher si une fiche existe d√©j√† pour l'agent avec cette date
          const existingFiche = await FichePresence.findOne({
            where: { matricule, date_presence }
          });

          if (existingFiche) {
            // Si une fiche existe, effectuer une mise √† jour (modification)
            existingFiche.statut = statut || existingFiche.statut;
            existingFiche.heure_arrivee = heure_arrivee || existingFiche.heure_arrivee;
            existingFiche.heure_depart = heure_depart || existingFiche.heure_depart;
            existingFiche.observations = observations || existingFiche.observations;

            await existingFiche.save(); // Enregistrer les changements de la fiche existante
            return { matricule, date_presence, message: "Fiche mise √† jour", fiche: existingFiche };
          } else {
            // Si aucune fiche n'existe, cr√©er une nouvelle fiche
            const newFiche = await FichePresence.create({
              matricule, 
              statut, 
              heure_arrivee, 
              heure_depart, 
              observations, 
              date_presence 
            });
            return { matricule, date_presence, message: "Fiche cr√©√©e", fiche: newFiche };
          }
        })
      );
      
      const notification = {
        message: `La fiche de presence du  ${fiches[0].date_presence} est enregistrer.`,
        user_id: "Agent",
    };
     getIo().emit('receiveNotification', notification);
     console.log(notification.message);
    // √âmettre une notification via Socket.io
   
      // Envoyer la r√©ponse avec le r√©sultat des fiches trait√©es
      res.status(200).json({
        message: "Fiches de pr√©sence trait√©es",
        result});
    } catch (error) {
      console.error("Erreur d'enregistrement :", error);
      res.status(500).json({ message: "Erreur d'enregistrement des pr√©sences", error: error.message });
    }
};
